<?php
/**
 * @file
 * Easily switch between different environments for your site. This will
 * automatically enable/disable modules and set various variables.
 */

define('TADAA_THEME_PATH', drupal_get_path('module', 'tadaa') . '/theme');

/**
 * Implements hook_menu().
 */
function tadaa_menu() {
  // Included files.
  $callback_file = 'tadaa.callbacks.inc';

  // Checks the state for the selected environment.
  $items['tadaa/environment/check'] = array(
    'page callback' => 'tadaa_check_environment',
    'access arguments' => array('use tadaa'),
    'file' => $callback_file,
    'type' => MENU_CALLBACK,
  );
  // Checks the state for individual modules.
  $items['tadaa/module/%/check'] = array(
    'page callback' => 'tadaa_check_module',
    'page arguments' => array(2),
    'access arguments' => array('use tadaa'),
    'file' => $callback_file,
    'type' => MENU_CALLBACK,
  );
  // Checks the state for individual variables.
  $items['tadaa/variable/%/check'] = array(
    'page callback' => 'tadaa_check_variable',
    'page arguments' => array(2),
    'access arguments' => array('use tadaa'),
    'file' => $callback_file,
    'type' => MENU_CALLBACK,
  );
  

  return $items;
}

/**
 * Implements hook_theme().
 */
function tadaa_theme($existing, $type, $theme, $path) {
  return array(
    'tadaa_toolbar' => array(
      'template' => 'tadaa-toolbar',
      'variables' => array(
        'environments_form' => NULL,
        'email_form' => NULL,
      ),
      'path' => TADAA_THEME_PATH,
    ),
  );
}

/**
 * Implements hook_init().
 */
function tadaa_init() {
  if (!user_access('use tadaa')) {
    // The user doesn't have access, exit early.
    return;
  }
  
  // Add some javascript settings.
  $settings['selectedEnvironment'] = TADAA_ENVIRONMENT;
  $settings['modules'] = tadaa_get_modules();
  $settings['variables'] = tadaa_get_variables();
  drupal_add_js(array('tadaa' => $settings), 'setting');
  
  // Add our JS and CSS file.
  drupal_add_js(TADAA_BASE_PATH . '/tadaa.js');
  drupal_add_css(TADAA_THEME_PATH . '/tadaa.css');
}

/**
 * Implements hook_page_alter().
 */
function tadaa_page_alter(&$page) {
  if (!user_access('use tadaa')) {
    // The user doesn't have access, exit early.
    return;
  }
  
  // Include the file with our callbacks.
  require TADAA_BASE_PATH . '/tadaa.callbacks.inc';
  
  // Get the environments form.
  $variables['environments_form'] = drupal_get_form('tadaa_environment_form');

  // Get the email form, if Reroute email is enabled.
  $variables['email_form'] = module_exists('reroute_email') ? drupal_get_form('tadaa_email_form') : FALSE;
  
  // Add the toolbar to the bottom region.
  $page['page_bottom']['tadaa'] = array(
    '#type' => 'markup',
    '#markup' => theme('tadaa_toolbar', $variables),
  );
}

/**
 * Implements hook_form().
 *
 * This is the form that's used for switching environments. It's added to the
 * toolbar.
 */
function tadaa_environment_form($form, &$form_state) {
  // Create a select list.
  $form['environment'] = array(
    '#type' => 'select',
    '#title' => t('Current environment'),
    '#ajax' => array(
      'callback' => 'tadaa_set_environment',
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
    ),
  );
  
  if (TADAA_ENVIRONMENT) {
    // Set the current environment as the default.
    $form['environment']['#default_value'] = TADAA_ENVIRONMENT;
  }
  else {
    // No environment has been chosen, add an option that clearly shows that no
    // environment has been chosen.
    $form['environment']['#options'][''] = t('- None -');
    $form['environment']['#default_value'] = '';
  }
  
  // Add each environment as an option to the select list.
  $environments = tadaa_get_environments();
  foreach ($environments as $environment => $configuration) {
    $form['environment']['#options'][$environment] = $configuration['name'];
  }

  return $form;
}

/**
 * AJAX callback that sets a new environment.
 *
 * This will activate the modules for the specified environment, and set it's
 * variables to there configured values.
 */
function tadaa_set_environment($form, &$form_state) {
  // The selected environment.
  $environment = $form_state['values']['environment'];

  if (!$environment) {
    // No environment specified, exit early.
    return;
  }

  // Get every module. The modules for this environment will be marked as
  // enabled.
  $modules = tadaa_get_modules($environment);

  // Build one array for the modules that should be enabled, and one for the
  // ones that should be disabled.
  $enable = array();
  $disable = array();
  foreach ($modules as $module => $status) {
    if ($status) {
      // Enabled module.
      $enable[] = $module;
    }
    else {
      // Disabled module.
      $disable[] = $module;
    }
  }

  // Enable and disable the modules.
  $test = module_enable($enable);
  module_disable($disable);

  // Get the variables for this environment, and set their values.
  $variables = tadaa_get_variables($environment);
  foreach ($variables as $variable => $value) {
    variable_set($variable, $value);
  }
  
  // Set the specified environment as the currently active one and flush all
  // caches.
  variable_set('tadaa_environment', $environment);
  drupal_flush_all_caches();
}

/**
 * Implements hook_form().
 *
 * This is the form that's used for setting an email address for Reroute email.
 * It's added to the toolbar if Reroute email is enabled.
 */
function tadaa_email_form($form, &$form_state) {
  // Create a textarea.
  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('Reroute emails to'),
    '#default_value' => variable_get('reroute_email_address', ''),
    '#ajax' => array(
      'callback' => 'tadaa_set_email',
      'progress' => array(
        'type' => 'throbber',
        'message' => '',
      ),
    ),
  );

  return $form;
}

/**
 * AJAX callback that sets the Reroute email address.
 *
 * @see http://drupal.org/project/reroute_email
 */
function tadaa_set_email($form, &$form_state) {
  $email = $form_state['values']['email'];
  if ($email) {
    variable_set('reroute_email_address', $email);
  }
  else {
    variable_del('reroute_email_address');
  }
}

/**
 * AJAX callback that checks the status for the active environment.
 *
 * This will only get the overall status for modules and variables. There are
 * other functions that will get the status for individual modules and
 * variables.
 *
 * @see tadaa_check_module()
 * @see tadaa_check_variable()
 */
function tadaa_check_environment() {
  // Get the modules and variables, and create the default status array.
  $modules = tadaa_get_modules(TADAA_ENVIRONMENT);
  $variables = tadaa_get_variables(TADAA_ENVIRONMENT);
  $status = array(
    'modules' => TRUE,
    'variables' => TRUE,
  );
  
  // Check the modules.
  foreach ($modules as $module => $config) {
    if ($config !== module_exists($module)) {
      // We found a foulty module, update the status array and exit the loop.
      $status['modules'] = FALSE;
      break;
    }
  }
  
  // Check the variables.
  foreach ($variables as $variable => $value) {
    if ($value !== variable_get($variable)) {
      // We found a foulty variable, update the status array and exit the loop.
      $status['variables'] = FALSE;
      break;
    }
  }
  
  drupal_json_output($status);
}

/**
 * AJAX callback that checks the status of an individual module.
 *
 * @param $module
 *  A string with the name of the module that we wish to check.
 */
function tadaa_check_module($module) {
  // Get every module.
  $modules = tadaa_get_modules(TADAA_ENVIRONMENT);
  
  // Return the status of this module.
  $status = array(
    'module' => $module,
    'config' => $modules[$module],
    'status' => $modules[$module] == module_exists($module),
  );
  drupal_json_output($status);
}

/**
 * AJAX callback that checks the status of an individual variable.
 *
 * @param $variable
 *  A string with the name of the variable that we wish to check.
 */
function tadaa_check_variable($variable) {
  // Get variables for the active environment.
  $variables = tadaa_get_variables(TADAA_ENVIRONMENT);
  
  // Return the status of this variable.
  $status = array(
    'variable' => $variable,
    'config' => $variables[$variable],
    'status' => $variables[$variable] == variable_get($variable, FALSE),
  );
  drupal_json_output($status);
}
