<?php
/**
 * @file
 * Main module file for the Treadmill module.
 */

/**
 * Implements hook_backup_migrate_filters().
 */
function treadmill_backup_migrate_filters(){
  return array(
    'treadmill' => array(
      'file' => drupal_get_path('module', 'treadmill') .'/filters.treadmill.inc',
      'class' => 'backup_migrate_filter_treadmill'
    )
  );
}

/**
 * Implements hook_menu().
 */
function treadmill_menu() {
  // Callback that deletes every table.
  $items['treadmill/system/delete-tables'] = array(
    'page callback' => 'treadmill_system_delete_tables',
    'access callback' => 'treadmill_remote_access',
    'type' => MENU_CALLBACK,
  );

  // Callback that reverts every feature.
  $items['treadmill/features/revert'] = array(
    'page callback' => 'treadmill_features_revert',
    'access callback' => 'treadmill_remote_access',
    'type' => MENU_CALLBACK,
  );

  // Callback that runs update.php.
  $items['treadmill/system/update'] = array(
    'page callback' => 'treadmill_system_update',
    'access callback' => 'treadmill_remote_access',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * General access callback for remote execution.
 *
 * This will verify the key that has been supplied in the query string. We will
 * use the same key as the cron key, for convenience.
 */
function treadmill_remote_access() {
  return isset($_GET['key']) && variable_get('cron_key', 'drupal') == $_GET['key'];
}

/**
 * Page callback for treadmill/system/delete-tables.
 */
function treadmill_system_delete_tables() {
  // Get the tables that we should keep.
  $keep = is_array($_POST) ? $_POST : array();

  // Iterate through every table and delete the ones that shouldn't be kept.
  foreach (drupal_get_complete_schema() as $table) {
    if (!in_array($table['name'], $keep) && db_table_exists($table['name'])) {
      db_drop_table($table['name']);
    }
  }

  exit();
}

/**
 * Page callback for treadmill/features/revert.
 *
 * @see ftools_features_revert_all_submit()
 */
function treadmill_features_revert() {
  // Include the necessary files and revert all features.
  module_load_include('inc', 'features', 'features.export');
  features_include();
  features_revert();

  // Clear the cache, and exit.
  drupal_flush_all_caches();
  exit();
}

/**
 * Page callback for treadmill/system/update.
 *
 * @see update_main_prepare()
 * @see update_main()
 * @see update_batch()
 */
function treadmill_system_update() {
  // We prepare a minimal bootstrap for the update requirements check to avoid
  // reaching the PHP memory limit.
  require_once DRUPAL_ROOT . '/includes/bootstrap.inc';
  require_once DRUPAL_ROOT . '/includes/common.inc';
  require_once DRUPAL_ROOT . '/includes/file.inc';
  require_once DRUPAL_ROOT . '/includes/entity.inc';
  include_once DRUPAL_ROOT . '/includes/unicode.inc';

  drupal_bootstrap(DRUPAL_BOOTSTRAP_SESSION);

  require_once DRUPAL_ROOT . '/includes/update.inc';
  require_once DRUPAL_ROOT . '/includes/install.inc';
  require_once DRUPAL_ROOT . '/modules/system/system.install';

  // Load module basics.
  include_once DRUPAL_ROOT . '/includes/module.inc';
  $module_list['system']['filename'] = 'modules/system/system.module';
  module_list(TRUE, FALSE, FALSE, $module_list);
  drupal_load('module', 'system');

  // Reset the module_implements() cache so that any new hook implementations
  // in updated code are picked up.
  module_implements('', FALSE, TRUE);

  // Set up $language, since the installer components require it.
  drupal_language_initialize();

  // Set up theme system for the maintenance page.
  drupal_maintenance_theme();

  // Now proceed with a full bootstrap.
  drupal_bootstrap(DRUPAL_BOOTSTRAP_FULL);

  include_once DRUPAL_ROOT . '/includes/batch.inc';
  drupal_load_updates();

  update_fix_compatibility();

   // Change query-strings on css/js files to enforce reload for all users.
  _drupal_flush_css_js();
  // Flush the cache of all data for the update status module.
  if (db_table_exists('cache_update')) {
    cache_clear_all('*', 'cache_update', TRUE);
  }

  module_list(TRUE, FALSE, TRUE);

  $pending = update_get_update_list();

  $start = array();

  // Ensure system module's updates run first.
  $start['system'] = array();

  // Print a list of pending updates for this module and get confirmation.
  if (sizeof($pending)) {
    foreach ($pending as $module => $updates) {
      if (isset($updates['start']))  {
        $start[$module] = $updates['start'];
      }
    }

    // Resolve any update dependencies to determine the actual updates that will
    // be run and the order they will be run in.
    $updates = update_resolve_dependencies($start);

    // Store the dependencies for each update function in an array which the
    // batch API can pass in to the batch operation each time it is called. (We
    // do not store the entire update dependency array here because it is
    // potentially very large.)
    $dependency_map = array();
    foreach ($updates as $function => $update) {
      $dependency_map[$function] = !empty($update['reverse_paths']) ? array_keys($update['reverse_paths']) : array();
    }

    // Create "batch" operations for each update.
    $operations = array();
    foreach ($updates as $update) {
      if ($update['allowed']) {
        // Set the installed version of each module so updates will start at the
        // correct place. (The updates are already sorted, so we can simply base
        // this on the first one we come across in the above foreach loop.)
        if (isset($start[$update['module']])) {
          drupal_set_installed_schema_version($update['module'], $update['number'] - 1);
          unset($start[$update['module']]);
        }
        // Add this update function to the batch.
        $function = $update['module'] . '_update_' . $update['number'];
        $operations[] = array('update_do_one', array($update['module'], $update['number'], $dependency_map[$function]));
      }
    }

    // Run each "batch" operation manually.
    foreach ($operations as $operation) {
      $module = $operation[1][0];
      $number = $operation[1][1];
      $dependency_map = $operation[1][2];
      $context = array('finished' => 1);
      $operation[0]($module, $number, $dependency_map, $context);
    }
  }

  // Clear the cache, and exit.
  drupal_flush_all_caches();
  exit();
}
