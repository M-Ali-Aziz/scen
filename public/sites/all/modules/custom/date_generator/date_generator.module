<?php
/**
 * @file
 * Main module file for date generator module.
 */

/**
 * Implementation of hook_block_info().
 */
function date_generator_block_info() {
  $blocks = array();
  // Date generator block
  $blocks['date_generator'] = array(
    'info' => t('Date Generator'),
    'region' => 'content-top',
    'status' => TRUE,
    'visidility' => BLOCK_VISIBILITY_LISTED,
    'page' => variable_get('site_frontpage', NULL),
  );
  // Date generator Result block
  $blocks['date_generator_result'] = array(
    'info' => t('Date Generator Result'),
    'region' => 'content',
    'status' => TRUE,
    'visidility' => BLOCK_VISIBILITY_LISTED,
    'page' => variable_get('site_frontpage', NULL),
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function date_generator_block_view($delta = '') {
  $block = array();
  switch($delta) {
    // Date Generator content
    case 'date_generator':
    $block['subject'] = t('Date Generator');
    $block['content'] = drupal_get_form('the_date_generator_form');
    break;
    // Date Generator Result content
    case 'date_generator_result':
      $block['subject'] = NULL;

      if (variable_get('date_generator_result_nids')) {
        // Add before performance nodos
        foreach (variable_get('date_generator_result_nids')['before'] as $before_nid) {
          $before_nodes[] = node_view(node_load($before_nid), 'teaser');
        }
        // Add performance node
        $performance_node = node_view(node_load(variable_get('date_generator_result_nids')['performance']), 'teaser');

        // Add after performance node
        $after_node = node_view(node_load(variable_get('date_generator_result_nids')['after']), 'teaser');

        // Add the nodes to the block content
        $block['content'] = theme('date_generator_result_template', array(
          'before_nodes' => $before_nodes,
          'performance' => $performance_node,
          'after_node' => $after_node,
          )
        );
      }
      else {
        // Add the nodes to the block content
        $block['content'] = '<h1 style="padding: 30px;">' . t('Please Create your first dream evening to see the result here:') . '</h1>';
      }
    break;
  }

  return $block;
}

/**
 * The date generator form.
 */
function the_date_generator_form($from, &$form_state) {
  $form['date'] = array(
    '#title' => 'Date',
    '#type' => 'date_popup',
    '#default_value' => date('Y-m-d'),
    '#date_year_range' => '0:+1',
    '#date_format' => 'd F Y',
    '#required' => TRUE,
    '#date_label_position' => 'none',
    '#attributes' => array(
      'class' => array('date-input'),
      'placeholder' => date('d F Y'),
    ),
  );

  $form['email'] = array(
    '#title' => 'Mail',
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => t('Enter your e-mail. We will send you the results.')
    ),
    '#size' => 60,
    '#maxlength' => 128,
    '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generating dream evening - Go!'),
  );

  return $form;
}

/**
 * Validate form input.
 */
function the_date_generator_form_validate(&$form, &$form_state) {
  $values = $form_state['values'];

  $nodes = node_load_multiple(array(), array('type' => array(
    'malmo_stadsteater',
    'malmo_opera',
    'skanes_dansteater',
  )));

  // Validate email field.
  if (!valid_email_address($values['email'])) {
    form_set_error('email', t('Not a valid email.'));
  }

  // Loop all nodes.
  foreach ($nodes as $node) {
    $wrapper = entity_metadata_wrapper('node', $node);

    // Getting all perfomances dates.
    if (isset($wrapper->field_malmo_stadsteater_date)) {
      $all_performances_dates[] = format_date($wrapper->field_malmo_stadsteater_date->value(), 'custom', 'Y-m-d');
    }

    if (isset($wrapper->field_malmo_opera_date)) {
      $all_performances_dates[] = format_date($wrapper->field_malmo_opera_date->value(), 'custom', 'Y-m-d');
    }


    if (isset($wrapper->field_skanes_dansteater_date)) {
      $all_performances_dates[] = format_date($wrapper->field_skanes_dansteater_date->value(), 'custom', 'Y-m-d');
    }
  }

  // Return error message if there is no performance matched with the wished date.
  if (!in_array($values['date'], $all_performances_dates)) {
    form_set_error('date', t('We could not found a performance in ' . $values['date']));
  }
}

/**
 * date generator form submit handler
 */
function the_date_generator_form_submit(&$form, &$form_state) {
  $values = $form_state['values'];

  // Convert date format to "Y-m-d".
  $form_date_value = date('Y-m-d', strtotime($values['date']));

  // The email value.
  $form_email_value = $values['email'];

  // Load all nodes of defined type.
  $nodes = node_load_multiple(array(), array('type' => array(
    'before_activity',
    'malmo_stadsteater',
    'malmo_opera',
    'skanes_dansteater',
    'after_activity',
  )));


  // Loop all nodes.
  foreach ($nodes as $node) {   
    // Wrapp node object.
    $wrapper = entity_metadata_wrapper('node', $node);

    // Get all matching perfomances nids for malmo stadsteater.
    if (isset($wrapper->field_malmo_stadsteater_date)) {
      $malmo_stadsteater_dates = format_date($wrapper->field_malmo_stadsteater_date->value(), 'custom', 'Y-m-d');

      // Store all matching dates.
      if ($malmo_stadsteater_dates === $form_date_value) {
        $all_matched_performances_nids[] = $node->nid;
      }
    }

    // Get all matching perfomances nids for malmo opera.
    if (isset($wrapper->field_malmo_opera_date)) {
      $malmo_opera_dates = format_date($wrapper->field_malmo_opera_date->value(), 'custom', 'Y-m-d');

      // Store all matching dates.
      if ($malmo_opera_dates === $form_date_value) {
        $all_matched_performances_nids[] = $node->nid;

      }
    }

    // Get all matching perfomances nids for skanes dansteater.
    if (isset($wrapper->field_skanes_dansteater_date)) {
      $skanes_dansteater_dates = format_date($wrapper->field_skanes_dansteater_date->value(), 'custom', 'Y-m-d');

      // Store all matching dates.
      if ($skanes_dansteater_dates === $form_date_value) {
        $all_matched_performances_nids[] = $node->nid;
      }
    }

    // Getting node ids(nid) of type before_activity
    if ($node->type == 'before_activity') {
      $before_activity_nids[] = $node->nid;
    }

    // Getting node ids(nid) of type after_activity
    if ($node->type == 'after_activity') {
      $after_activity_nids[] = $node->nid;
    }

  }

  // Get random nids
  // Randomly getting two nids from $before_activity_nids
  foreach (array_rand($before_activity_nids, 2) as $key) {
    $activity_nids['before'][] = $before_activity_nids[$key];
  }

  // Randomly get one nid from $all_matched_performances_nids
  $activity_nids['performance'] = $all_matched_performances_nids[array_rand($all_matched_performances_nids, 1)];

  // Randomly get one nid from $after_activity_nids
  $activity_nids['after'] = $after_activity_nids[array_rand($after_activity_nids, 1)];

  // Send email
  drupal_mail('date_generator', 'date_email', $form_email_value, 'sv', $activity_nids);

  drupal_set_message(t('The email was sent to ' . $form_email_value));

  // Set $activity_nids as global
  variable_set('date_generator_result_nids', $activity_nids);

  // Create the blocks with new data
  date_generator_block_info();
}

/**
 * Implementation of hook_mail().
 */
function date_generator_mail($key, &$message, $params) {
  switch ($key){
    case 'date_email':
    // Set headers
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

    // Set Subject
    $message['subject'] = t('The Dream Evening!');

    // Add before performance nodes.
    foreach ($params['before'] as $before_nid) {
      $before_nodes[] = node_view(node_load($before_nid), 'teaser');
    }

    // Add performance node.
    $performance_node = node_view(node_load($params['performance']), 'teaser');

    // Add after performance node.
    $after_node = node_view(node_load($params['after']), 'teaser');

    // Set body
    $message['body'][] = theme('date_generator_template', array(
      'before_nodes' => $before_nodes,
      'performance' => $performance_node,
      'after_node' => $after_node,
      )
    );
    break;
  }
}

/**
 * Implementaion of hook_theme().
 */
function date_generator_theme($existing, $type, $theme, $path) {
  $path1 = drupal_get_path('module', 'date_generator') . '/templates';
  $path2 = drupal_get_path('theme', 'scen') . '/templates/page/content';
  
  return array(
    'date_generator_template' => array(
      'template' => 'date_generator_template',
      'variables' => array(
        'before_nodes' => array(),
        'performance' => NULL,
        'after_node' => NULL,
      ),
      'path' => $path1,
    ),
    'date_generator_result_template' => array(
      'template' => 'date_generator_result_template',
      'variables' => array(
        'before_nodes' => array(),
        'performance' => NULL,
        'after_node' => NULL,
      ),
      'path' => $path2,
    ),
  );
}
