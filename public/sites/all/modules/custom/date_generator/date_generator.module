<?php
/**
 * @file
 * Main module file for date generator module.
 */

/**
 * Implementation of hook_init().
 */
// function date_generator_init() {
//   drupal_set_message('Date Generator module is ON!');
// }


function date_generator_node_load($nodes, $types) {
  // drupal_set_message('hook load!');

  // dprint_r($nodes); die;
  // dprint_r($types); die;

}

//   function date_generator_node_view($node, $view_mode, $langcode) {
//   drupal_set_message('hook_node_view() is ON!');

// // // Unified way of getting $node->title, $user->name, ...
// // $wrapper->label();

// // // Unified way of getting $node->nid, $user->uid, ...
// // $wrapper->getIdentifier();

// // // Unified way of getting $node->type, ...
// // $wrapper->getBundle();

//   // $node_wrapper = entity_metadata_wrapper('node', $node);
//   // dprint_r($node_wrapper); die;

//   dprint_r($node); die;

//   }


/**
 * Implementation of hook_block_info().
 */
function date_generator_block_info() {
  $blocks = array();
  $blocks['date_generator'] = array(
    'info' => t('Date Generator'),
    'region' => 'content-top',
    'status' => TRUE,
    'visidility' => BLOCK_VISIBILITY_LISTED,
    'page' => variable_get('site_frontpage', NULL),
  );

  return $blocks;
}

/**
 * Implementation of hook_block_view().
 */
function date_generator_block_view($delta = '') {
  $block = array();
  switch($delta) {
    case 'date_generator':
    $block['subject'] = t('Date Generator');
    $block['content'] = drupal_get_form('the_date_generator_form');
    break;
  }

  return $block;
}

/**
 * Implementation of hook_form().
 */
function date_generator_form() {
  return drupal_get_form('the_date_generator_form');
}

/**
 * The date generator form
 */
function the_date_generator_form($from, &$form_state) {

  $form['date'] = array(
    '#type' => 'date_popup',
    // '#date_timezone' => 'Europe/Stockholm', 
    // '#default_value' => date('Y-m-d H:i:s'),
    '#default_value' => date('Y-m-d'),
    '#date_year_range' => '-1:+1',
    '#date_format' => 'd F Y',
    '#date_label_position' => 'none',
    '#attributes' => array(
      'class' => array('date-input'),
      'placeholder' => date('l d F'),
    ),
    // '#required' => TRUE,
  );

  $form['email'] = array(
    '#type' => 'textfield',
    // '#default_value' => t('Enter your e-mail. We will send you the results.'),
    '#attributes' => array(
      'placeholder' => t('Enter your e-mail. We will send you the results.')
    ),
    '#size' => 60,
    '#maxlength' => 128,
    // '#required' => TRUE,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generating dream evening - Go!'),
    // '#submit' => array('the_date_generator_form_submit'),
  );

  // $form['#submit'][] = 'the_date_generator_form_submit';

  // $form['actions']['submit']['#submit'][0] = 'the_date_generator_form_submit';

  return $form;
}

/**
 * date generator form submit handler
 */
function the_date_generator_form_submit($form, &$form_state) {
  // drupal_set_message('The date generator has been submitted!');
  // dprint_r($form); die;
  // dprint_r($form['date']['#value']['date']); die;
  // dprint_r($form_state); die;

  // 1- Getting date amd email value from submitted form
  // the date(field) value from the submitted form
  $form_date_value = $form['date']['#value']['date'];
  // convert date format to "Y-m-d".
  $form_date_value = date('Y-m-d', strtotime($form_date_value));
  // the email(field) value from the submitted form
  $form_mail_value = $form['email']['#value'];
  // dprint_r($form_date_value);
  // dprint_r($form_mail_value); die;



  // 2- Getting nodes
  // load all nodes
  $load_nodes = node_load_multiple(array(), array('type' => array(
    'before_activity',
    'malmo_stadsteater',
    'malmo_opera',
    'skanes_dansteater',
    'after_activity',
    )));

  // All performances dates
  $all_performances_dates = array();
  // All performances nids matched with the wished date($form_date_value)
  $all_performances_nids = array();

  // Bifore Activity node ids
  $before_activity_nids = array();
  // After Activity node ids
  $after_activity_nids = array();
  // Malmo Stadsteater node ids
  $malmo_stadsteater_nids = array();
  // Malmo Stadsteater node ids
  $malmo_stadsteater_nids = array();
  // Malmo Opera node ids
  $malmo_opera_nids = array();
  // Skanes Dansteater node ids
  $skanes_dansteater_nids = array();

  // loop throw all nodes
  foreach ($load_nodes as $load_node) {

    // Getting all perfomances dates
    $malmo_stadsteater_dates = substr($load_node->field_malmo_stadsteater_date['sv'][0]['value'], 0, 10);
    $malmo_opera_dates = substr($load_node->field_malmo_opera_date['sv'][0]['value'], 0, 10);
    $skanes_dansteater_dates = substr($load_node->field_skanes_dansteater_date['sv'][0]['value'], 0, 10);
    // push the result(dates) to  $all_performances_dates array
    if ($malmo_stadsteater_dates) {
      array_push($all_performances_dates, $malmo_stadsteater_dates);
    }elseif ($malmo_opera_dates) {
      array_push($all_performances_dates, $malmo_opera_dates);
    }elseif ($skanes_dansteater_dates) {
      array_push($all_performances_dates, $skanes_dansteater_dates);
    }


    // Getting all node ids
    // Getting node ids(nid) of type before_activity
    if ($load_node->type == 'before_activity') {
      // dprint_r($load_node->nid);
      // var_dump($load_node->nid);
      $before_activity_nid = $load_node->nid;
      array_push($before_activity_nids, $before_activity_nid);
    }
    // Getting node ids(nid) of type after_activity
    if ($load_node->type == 'after_activity') {
      // dprint_r($load_node->nid);
      // var_dump($load_node->nid);
      $after_activity_nid = $load_node->nid;
      array_push($after_activity_nids, $after_activity_nid);

    }
    // Getting node ids(nid) of type malmo_stadsteater
    if ($load_node->type == 'malmo_stadsteater') {
        // dprint_r($form_date_value);
        // dprint_r($malmo_stadsteater_dates);
      if ($malmo_stadsteater_dates === $form_date_value) {
        // dprint_r($load_node->nid);
        $malmo_stadsteater_nid = $load_node->nid;
        array_push($malmo_stadsteater_nids, $malmo_stadsteater_nid);
        array_push($all_performances_nids, $malmo_stadsteater_nid);
      }

    }
    // Getting node ids(nid) of type malmo_opera
    if ($load_node->type == 'malmo_opera') {
      // dprint_r($load_node->nid);      
      if ($malmo_opera_dates === $form_date_value) {
        // var_dump($load_node->nid);
        $malmo_opera_nid = $load_node->nid;
        array_push($malmo_opera_nids, $malmo_opera_nid);
        array_push($all_performances_nids, $malmo_opera_nid);
      }
    }
    // Getting node ids(nid) of type skanes_dansteater
    if ($load_node->type == 'skanes_dansteater') {
      // dprint_r($load_node->nid);
      // var_dump($load_node->nid);
      if ($skanes_dansteater_dates === $form_date_value) {
        $skanes_dansteater_nid = $load_node->nid;
        array_push($skanes_dansteater_nids, $skanes_dansteater_nid);
        array_push($all_performances_nids, $skanes_dansteater_nid);
      }

    }


      // dprint_r($load_node->type);
  }
  // die;
  // var_dump($form_date_value);
  // var_dump($all_performances_dates);
  // var_dump($before_activity_nids);
  // var_dump($after_activity_nids);
  // var_dump($malmo_stadsteater_nids);
  // var_dump($malmo_opera_nids);
  // var_dump($skanes_dansteater_nids);
  var_dump($all_performances_nids);

  die;

  // return error message if there is no performance matched with the form_date_value.
  if (!in_array($form_date_value, $all_performances_dates)) {
    echo 'The date is not matching!!!!!!!!!!';
    drupal_set_message($form_date_value);
    drupal_set_message(t('Oops! We could not found a performance in ' . $form_date_value . '.'), 'error');
    return;
  }
    
  drupal_set_message($form_date_value);
  drupal_set_message(t('COOL! date is matching.'));
  
  // die;

}






